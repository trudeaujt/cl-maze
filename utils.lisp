(defun base62-char (n)
  (let* ((digits "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
         (index (if n 
                    (mod n (length digits))
                    0)))
    (aref digits index)))

(defun row-major-collect (buffer row)
  "Collects all characters in a given row from BUFFER."
  (let* ((cols (second (array-dimensions buffer)))
         (chars (make-array cols :element-type 'character)))
    (dotimes (col cols)
      (setf (aref chars col) (aref buffer row col)))
    chars)) 

(defun map-vector (f array)
  (let* ((dims (array-dimensions array))
         (result (make-array dims)))
    (labels ((map-dim (indices remaining-dims)
               (if (null remaining-dims)
                   (setf (apply #'aref result (reverse indices))
                         (funcall f (apply #'aref array (reverse indices))))
                   (dotimes (i (first remaining-dims))
                     (map-dim (cons i indices) (rest remaining-dims))))))
      (map-dim '() dims))
    result))

(defmacro mapv (f array)
  `(let ((arr ,array))
     (dotimes (i (array-dimension arr 0))
       (funcall ,f (subarray arr (list i))))
     arr))

(defun for-each-row (fn array)
  (loop for i from 0 below (array-dimension array 0)
        do (let ((row (loop for j from 0 below (array-dimension array 1)
                            collect (aref array i j))))
             (funcall fn row))))

(defun sample (items)
  (let ((len (length items)))
    (unless (= len 0)
      (elt items (random len)))))
